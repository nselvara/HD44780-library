name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install tools
        run: sudo apt update && sudo apt install -y cmake gcc make cppcheck clang-format

      - name: Lint (cppcheck)
        run: |
          cppcheck \
            --enable=style,performance,portability \
            --inconclusive --quiet --error-exitcode=1 \
            --std=c99 \
            -Isrc -Iinclude \
            --suppress=unusedFunction \
            src include

      - name: Lint (clang-format)
        run: |
          find src include -name '*.c' -o -name '*.h' | xargs clang-format -n --Werror

  build-mock:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install tools
        run: sudo apt update && sudo apt install -y cmake gcc

      - name: Build with Mock HAL
        run: python build_and_deploy.py mock

      - name: Run mock demo
        run: |
          # For Linux builds
          DEMO_EXECUTABLE=$(find build -path "*/demo/*" -name "lcd_demo_mock" -type f -executable | head -1)
          if [ -n "$DEMO_EXECUTABLE" ]; then
            echo "Running $DEMO_EXECUTABLE"
            $DEMO_EXECUTABLE
          else
            echo "No mock demo executable found"
            find build -name "lcd_demo_mock*" -type f -ls
          fi

      - name: Run mock tests
        run: python build_and_deploy.py --test --junit mock

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: mock-test-results
          path: build/test-results-mock.xml

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mock-lcd-executables
          path: build/demo/*

  build-sim:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install tools
        run: sudo apt update && sudo apt install -y cmake gcc

      - name: Build with Sim HAL
        run: python build_and_deploy.py sim

      - name: Run sim tests
        run: python build_and_deploy.py --test --junit sim

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: sim-test-results
          path: build/test-results-sim.xml

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: sim-lcd-executables
          path: build/demo/*

  # Only run Xilinx on PRs to main since it may require special hardware
  build-xilinx:
    runs-on: ubuntu-latest
    needs: lint
    if: github.event_name == 'pull_request' && github.base_ref == 'main'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install tools
        run: sudo apt update && sudo apt install -y cmake gcc

      - name: Build with Xilinx HAL
        run: python build_and_deploy.py xilinx

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xilinx-lcd-executables
          path: build/demo/*
